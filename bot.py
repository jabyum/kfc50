import telebot
import buttons as bt
from geopy.geocoders import Nominatim
import database as db
bot = telebot.TeleBot("")
# –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
#geolocator = Nominatim(user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36")
# db.add_product(pr_name= "–ö–æ–ª–∞", pr_quantity=10, pr_price=20000.0, pr_des="–ª—É—á—à–∏–π", pr_photo="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTzolUu5EuGCYGg--0U4LV8vuQ0w1nHKxvMjiPgIqxCSA&s")
# print(db.get_all_products())
# print(db.get_pr_id_name())
users = {}


@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    checker = db.check_user(user_id)
    if checker == False:
        bot.send_message(user_id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! "
                                  "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç –æ—Ç KFC!\n"
                                  "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
                                  "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        bot.register_next_step_handler(message, get_name)
    elif checker == True:
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bt.main_menu_kb())

def get_name(message):
    user_id = message.from_user.id
    name = message.text
    bot.send_message(user_id, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
                     reply_markup=bt.phone_bt())
    print(message.contact)
    bot.register_next_step_handler(message, get_phone_number, name)
def get_phone_number(message, name):
    user_id = message.from_user.id
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    if message.contact:
        phone_number = message.contact.phone_number
        print(phone_number)
        bot.send_message(user_id, "–ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
                                  "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bt.main_menu_kb())
        db.add_user(user_id=user_id, name=name, phone_number=phone_number)
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
        bot.register_next_step_handler(message, get_phone_number, name)
@bot.message_handler(content_types=['text'])
def main_menu(message):
    user_id = message.from_user.id
    if message.text == "üõí –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑":
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å",
                         reply_markup=bt.location_kb())
        bot.register_next_step_handler(message, get_location)

    elif message.text == "üõç –ö–æ—Ä–∑–∏–Ω–∞":
        pass
    elif message.text == "–û—Ç–∑—ã–≤":
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤")
        bot.register_next_step_handler(message, feedback)
    elif message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        pass

def get_location(message):
    user_id = message.from_user.id
    # if message.location:
    if message:
        # –ø–æ–ª—É—á–∞–µ–º —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É
        # longitude = message.location.longitude
        # latitude = message.location.latitude
        # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É –≤ –∞–¥—Ä–µ—Å
        # address = geolocator.reverse((latitude, longitude)).address
        actual_products = db.get_pr_id_name()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=bt.all_products(actual_products))
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
        # TODO ne rabotaet
        # bot.register_next_step_handler(message, get_location)
        bot.register_next_step_handler(message, products_menu)

def products_menu(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=bt.all_products())

def feedback(message):
    user_id = message.from_user.id
    admins_group_id = -4137671137
    feedback_text = message.text
    full_text = (f"<b>–ê–π–¥–∏ —é–∑–µ—Ä–∞</b>:{user_id}\n"
                 f"<b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞</b>: {feedback_text}")
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    bot.send_message(admins_group_id, full_text, parse_mode="HTML")

@bot.callback_query_handler(lambda call: call.data in ["back", "user_cart", "plus", "minus", "none", "to_cart"])
def for_call(call):
    user_id = call.message.chat.id
    if call.data == "back":
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å",
                         reply_markup=bt.location_kb())
        bot.register_next_step_handler(call.message, get_location)
    elif call.data == "user_cart":
        pass
    elif call.data == "plus":
        current_ammount = users[user_id]["pr_count"]
        users[user_id]["pr_count"] += 1
        bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.id,
                                      reply_markup=bt.exact_product(current_ammount, "plus"))
    elif call.data == "minus":
        current_ammount = users[user_id]["pr_count"]
        if current_ammount > 1:
            users[user_id]["pr_count"] -= 1
            bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.id,
                                      reply_markup=bt.exact_product(current_ammount, "minus"))
        else:
            pass
    elif call.data == "none":
        pass
    elif call.data == "to_cart":
        db.add_to_cart(user_id, users[user_id]["pr_id"], users[user_id]["pr_name"], users[user_id]["pr_count"],
                       users[user_id]["pr_price"])
        users.pop(user_id)
        bot.delete_message(chat_id=user_id, message_id=call.message.id)
        bot.send_message(user_id, "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")
        actual_products = db.get_pr_id_name()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=bt.all_products(actual_products))

@bot.callback_query_handler(lambda call: int(call.data) in db.get_all_id())
def calls_for_products(call):
    user_id = call.message.chat.id
    product = db.get_exact_produdct(int(call.data))
    bot.delete_message(user_id, call.message.id)
    users[user_id] = {"pr_id": call.data, "pr_name": product[0], "pr_count": 1, "pr_price": product[1]}
    bot.send_photo(user_id, photo=product[3], caption=f"{product[0]}\n"
                                                      f"–û–ø–∏—Å–∞–Ω–∏–µ: {product[2]}\n"
                                                      f"–¶–µ–Ω–∞: {product[1]}\n"
                                                      f"–í—ã–±—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ", reply_markup=bt.exact_product())

bot.polling(non_stop=True)
